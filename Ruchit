#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

//find_by order <val by idx>
//order of key  <n ele smaller than key >
#define ordered_set tree<int, null_type,less<>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);
#define endl "\n"
#define ld long double
#define vll vector<ll>
#define vi vector<int>
#define vb vector<bool>
#define pi pair<int,int>
#define pll pair<ll,ll>
#define vp vector<pi>
#define vpll vector<pll>
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define F first
#define S second
#define forn(i,a,b) for(ll i=a;i<b;i++)
#define forni(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(), x.rend()
#define mint map<int,int>
#define mall map<ll,ll>
#define gu(a,s) get<a>(s)
#define tin tuple<ll,ll,ll>
#define ter(x,y,z) ((x)?y:z)
#define deb1(x) cout<<#x<<" "<<x<< "\n"
#define deb2(x,y) cout<<#x<<" "<<x<<" "<<#y<<" "<<y<<"\n"
#define deb3(x,y,z) cout<<#x<<" "<<x<<" "<<#y<<" "<<y<<" "<<#z<<" "<<z<<"\n"
#define vin(a) for(auto &x:a) cin>>x
#define vout(a) for(auto x:a) cout<<x<<" ";cout<<endl
//<----------------------------------------------------------------------------------------------------------------------------------------------->

const ll maxn = 3e5 + 5;
const ll max_val = 2e5 + 10;
ll mod =  998244353ll;
ll INF=(ll) 9e18;

//<----------------------------------------------------------------------------------------------------------------------------------------------->
    
    // #ifndef ONLINE_JUDGE
    // freopen("input.txt", "r", stdin);
    // freopen("out.txt", "w", stdout);
    // #endif 
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
int numberOfPaths(int m, int n)
{

    if (m == 1 || n == 1)
        return 1;

    return numberOfPaths(m - 1, n) + numberOfPaths(m, n - 1);
    
}
int main()
{  
   fast
    vll fact(2005);
     fact[0]=1;
     for (int i = 1; i < 2005; i++)
        fact[i] = (fact[i-1] * i) % mod;
   ll t=1;
   cin>>t;
   while(t--)
   {
     ll n,m;cin>>n>>m;
     ll ans=0;
     ll dim=(n-1)*(m-1);
     ll od=n+m-1;
     if(dim%2==1|| od<=1)
     {
        cout<<0<<endl;
        continue;
     }
    //  deb1(dim);
     ans=(binpow(2,dim,mod))%mod;
    //  deb2(ans,1);
     
     ll bc=(fact[od]/(fact[od/2]*fact[od/2])%mod)%mod;
     ans=(ans*bc)%mod;
    //  deb2(ans,2);
     ans%=mod;
    //  ans=ans*( (fact[n+m]/((fact[n]*fact[m])%mod))%mod );
    ans=(ans*numberOfPaths(m,n))%mod;
    //  deb2(ans,3);
     ans%=mod;
     cout<<ans<<endl;


   }
   return 0;
}
